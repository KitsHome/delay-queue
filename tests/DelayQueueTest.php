<?php

namespace Haozu\DelayQueue\Tests;

use Haozu\DelayQueue\Container;
use Haozu\DelayQueue\DelayQueue;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-05-18 at 13:59:13.
 * 
 * DelayQueue test 
 * phpunit tests/DelayQueueTest.php
 * 
 * @authors xiexinyang (xiexinyang@haozu.com)
 * @date    2018-05-18 14:00:12
 * @version 1.0
 * 
 */

class DelayQueueTest extends TestCase
{   


    public function enqueueProvider(){
        return array(
            array('order','Job\\Order\\GetOrder',2,10,1),
            //array('order','Job\\Order\\GetOrder1',20,10,2),
        );

    }

    /**
     * @//dataProvider enqueueProvider
     * @covers Haozu\DelayQueue\DelayQueue::enqueue
     * @todo   Implement testEnqueue().
     */
    public function testEnqueue()
    {   
        //$delayqueue = DelayQueue::enqueue($topic,$job,$delay,$ttr,$args);
        $delayqueue = DelayQueue::enqueue('order','Job\\Order\\GetOrder',1,1,1);
        $this->assertTrue((bool)$delayqueue);
        return [$delayqueue,1];
    }

    /**
     * @depends testEnqueue
     * @covers Haozu\DelayQueue\DelayQueue::touchTimer
     * @todo   Implement testTickHandler().
     */
    public function testTouchTimer($stack)
    {   
        sleep($stack[1]+1);
        Container::instance()->delayqueue->touchTimer(1);
        return $stack;
    }
    
    /**
     * @depends testTouchTimer
     * @covers Haozu\DelayQueue\DelayQueue::get
     * @todo   Implement testGet().
     */
    public function testGet($stack)
    {  
        $jobInfo = DelayQueue::get($stack[0]);
        $this->assertNotEmpty($jobInfo);
        return $jobInfo;
    }

    /**
     * @depends testGet
     * @covers Haozu\DelayQueue\DelayQueue::pop
     * @todo   Implement testBpop().
     */
    public function testPop($stack)
    {   
        //第一次消费完,不删除job,测试超过job超时时间是否可重新消费
        $jobInfo = Container::instance()->delayqueue->pop([$stack['topic']]);
        return $jobInfo;
    }

    /**
     * @depends testPop
     * @covers Haozu\DelayQueue\DelayQueue::bpop
     * @todo   Implement testBpop().
     */
    public function testBpop($stack)
    {   
        //第二次消费 消费前先调用触发器
        $this->testTouchTimer(1);
        $jobInfo = Container::instance()->delayqueue->bpop([$stack['topic']],1);
        return $jobInfo;
    }

    /**
     * @depends testBpop
     * @covers Haozu\DelayQueue\DelayQueue::remove
     * @todo   Implement testRemove().
     */
    public function testRemove($stack)
    {   
        $result = DelayQueue::remove($stack['id']);
        $this->assertTrue((bool)$result);
    }
   
}



